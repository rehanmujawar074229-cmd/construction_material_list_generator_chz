import React, { useState, useEffect, useMemo } from 'react';
import { X, Search, ArrowLeft } from 'lucide-react';
import { materialData, MaterialOption, MaterialCategory } from '../data/materials';
import { Material } from '../App';

interface AddMaterialModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddMaterial: (material: Omit<Material, 'id'>) => void;
}

const AddMaterialModal: React.FC<AddMaterialModalProps> = ({ isOpen, onClose, onAddMaterial }) => {
  const [view, setView] = useState<'list' | 'details'>('list');
  const [searchTerm, setSearchTerm] = useState('');
  const [activeFilter, setActiveFilter] = useState('ALL');
  const [selectedMaterial, setSelectedMaterial] = useState<MaterialOption | null>(null);

  const [quantity, setQuantity] = useState('1');
  const [selectedSize, setSelectedSize] = useState('');

  const filters = ['ALL', 'SWR', 'CPVC', 'APVC', 'Other'];

  const filteredData = useMemo(() => {
    let data: MaterialCategory[] = JSON.parse(JSON.stringify(materialData));

    if (activeFilter !== 'ALL') {
      const categoryNameMap: { [key: string]: string } = {
        'SWR': 'SWR Material',
        'CPVC': 'CPVC Material',
        'APVC': 'APVC Material',
        'Other': 'Other',
      };
      const categoryToFilter = categoryNameMap[activeFilter];
      data = data.filter(c => c.category === categoryToFilter);
    }

    if (searchTerm) {
      data = data
        .map(category => {
          const filteredItems = category.items.filter(item =>
            item.name.toLowerCase().includes(searchTerm.toLowerCase())
          );
          return { ...category, items: filteredItems };
        })
        .filter(category => category.items.length > 0);
    }

    return data;
  }, [searchTerm, activeFilter]);

  useEffect(() => {
    if (isOpen) {
      setView('list');
      setSearchTerm('');
      setActiveFilter('ALL');
      setSelectedMaterial(null);
    }
  }, [isOpen]);

  useEffect(() => {
    if (selectedMaterial) {
      setQuantity('1');
      setSelectedSize(selectedMaterial.sizes && selectedMaterial.sizes.length > 0 ? selectedMaterial.sizes[0] : '');
    }
  }, [selectedMaterial]);

  const handleSelectMaterial = (material: MaterialOption) => {
    setSelectedMaterial(material);
    setView('details');
  };

  const handleAddToList = () => {
    if (!selectedMaterial) return;

    onAddMaterial({
      name: selectedMaterial.name,
      size: selectedSize,
      quantity: parseInt(quantity, 10) || 1,
    });
    
    setView('list');
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md flex flex-col max-h-[90vh]">
        <div className="flex justify-between items-center p-4 border-b flex-shrink-0">
          <div className="flex items-center gap-4">
            {view === 'details' && (
              <button onClick={() => setView('list')} className="text-slate-600 hover:text-slate-900">
                <ArrowLeft size={24} />
              </button>
            )}
            <h3 className="text-lg font-semibold text-slate-800">
              {view === 'list' ? 'Add Material' : selectedMaterial?.name}
            </h3>
          </div>
          <button onClick={onClose} className="text-slate-500 hover:text-slate-800">
            <X size={24} />
          </button>
        </div>

        {view === 'list' ? (
          <div className="flex flex-col overflow-hidden">
            <div className="p-4 border-b">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400" size={20} />
                <input
                  type="text"
                  placeholder="Search materials..."
                  value={searchTerm}
                  onChange={e => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
                />
              </div>
              <div className="flex items-center gap-2 mt-3 overflow-x-auto pb-2 -mb-2">
                {filters.map(filter => (
                  <button
                    key={filter}
                    onClick={() => setActiveFilter(filter)}
                    className={`px-4 py-1.5 text-sm font-semibold rounded-full whitespace-nowrap transition-colors ${
                      activeFilter === filter
                        ? 'bg-blue-600 text-white'
                        : 'bg-slate-200 text-slate-700 hover:bg-slate-300'
                    }`}
                  >
                    {filter}
                  </button>
                ))}
              </div>
            </div>
            <div className="p-4 overflow-y-auto">
              {filteredData.length > 0 ? (
                filteredData.map(category => (
                  <div key={category.category} className="mb-4">
                    <h4 className="font-bold text-slate-600 mb-2">{category.category}</h4>
                    <ul className="divide-y divide-slate-200">
                      {category.items.map(item => (
                        <li
                          key={item.name}
                          onClick={() => handleSelectMaterial(item)}
                          className="py-3 px-2 -mx-2 cursor-pointer hover:bg-slate-50 rounded-md"
                        >
                          <p className="font-medium text-slate-800">{item.name}</p>
                          {item.sizes && item.sizes.length > 0 && (
                            <p className="text-sm text-slate-500">{item.sizes.join(', ')}</p>
                          )}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))
              ) : (
                <p className="text-center text-slate-500 mt-8">No materials found.</p>
              )}
            </div>
          </div>
        ) : (
          <div className="p-6 space-y-4">
            {selectedMaterial?.sizes && selectedMaterial.sizes.length > 0 && (
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">Size</label>
                <select
                  value={selectedSize}
                  onChange={(e) => setSelectedSize(e.target.value)}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
                >
                  {selectedMaterial.sizes.map(size => <option key={size} value={size}>{size}</option>)}
                </select>
              </div>
            )}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Quantity</label>
              <input
                type="number"
                value={quantity}
                onChange={(e) => setQuantity(e.target.value)}
                className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
                placeholder="e.g., 10"
                min="1"
              />
            </div>
          </div>
        )}

        <div className="flex justify-end items-center p-4 border-t gap-3 mt-auto flex-shrink-0">
          {view === 'list' ? (
            <button onClick={onClose} className="px-6 py-2 bg-slate-200 text-slate-800 rounded-md hover:bg-slate-300">
              Close
            </button>
          ) : (
            <>
              <button onClick={() => setView('list')} className="px-4 py-2 bg-slate-200 text-slate-800 rounded-md hover:bg-slate-300">
                Cancel
              </button>
              <button onClick={handleAddToList} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                Add to List
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddMaterialModal;
